#include "linkedlist.hpp"

//----------------------------------------------------------------------------------------------------------------
// this is the definition of the LinkedListClass
//----------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------
// constructor
//----------------------------------------------------------------------------------------------------------------
template<typename T>
LinkedList<T>::LinkedList(): list(NULL), current(NULL), size(0)
{
}

//----------------------------------------------------------------------------------------------------------------
// destructor
//----------------------------------------------------------------------------------------------------------------
template<typename  T>
LinkedList<T>::~LinkedList()
{
    //TODO
}

//----------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------
template<typename T>
bool LinkedList<T>::put(T item)
{
    // if empty
    if(list == NULL)
    {
        list = new node;
        list->data = item;
        list->next = NULL;
        current = list;
        size++;
    }
    else
    {
        node* curr = list;
        node* prev = NULL;
        while(curr->next != NULL)
        {
            if(item > curr->data)
            {
                curr = curr->next;
                prev = curr;
            }
            else
            {
                node* temp = new node;
                temp->data = item;
                temp->next = curr;
                prev->next = temp;
                delete temp;
            }
        }



    }

}

//----------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------
template<typename T>
bool LinkedList<T>::isEmpty()
{
    //TODO
}

//----------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------
template<typename T>
bool LinkedList<T>::reset()
{
    //TODO
}

//----------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------
template<typename T>
bool LinkedList<T>::next(T &item)
{
    //TODO
}
